# -*- coding: utf-8 -*-
"""Mis_en_patrique.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0KYDPDy1SFrJgmiqT0E7u1un2k81Xpy
"""

import pickle
import joblib
import warnings
import numpy as np
warnings.filterwarnings('ignore', category=UserWarning, module='sklearn')

def create_mock_data():
    """Crée des données fictives pour tester les modèles"""

    patients_data = {
        'patient_1': {
            'name': 'Patient à haut risque',
            'data': np.array([[2.8, 1, 1, 1]]),
            'expected': 'maladie cardiaque'
        },
        'patient_2': {
            'name': 'Patient à faible risque',
            'data': np.array([[0.2, 0, 0, 0]]),
            'expected': 'pas de maladie cardiaque'
        },
        'patient_3': {
            'name': 'Patient à risque modéré',
            'data': np.array([[1.5, 1, 0, 1]]),
            'expected': 'risque modéré'
        },
        'patient_4': {
            'name': 'Patient avec douleur thoracique asymptomatique',
            'data': np.array([[1.0, 1, 0, 0]]),
            'expected': 'risque modéré'
        },
        'patient_5': {
            'name': 'Patient avec angine d\'effort',
            'data': np.array([[0.8, 0, 1, 0]]),
            'expected': 'risque modéré'
        }
    }

    return patients_data

def get_patient_input():
    print("\n--- Saisie des données du patient ---")
    print("Veuillez entrer les valeurs pour les 4 variables principales:")

    try:
        oldpeak = float(input("Oldpeak (dépression ST, ex: 0.0-6.0): "))
        chest_pain_asy = int(input("ChestPainType_ASY (0=Non, 1=Oui): "))
        exercise_angina = int(input("ExerciseAngina_Y (0=Non, 1=Oui): "))
        st_slope_flat = int(input("ST_Slope_Flat (0=Non, 1=Oui): "))

        if chest_pain_asy not in [0, 1] or exercise_angina not in [0, 1] or st_slope_flat not in [0, 1]:
            print("Erreur: Les valeurs binaires doivent être 0 ou 1")
            return None

        return np.array([[oldpeak, chest_pain_asy, exercise_angina, st_slope_flat]])

    except ValueError:
        print("Erreur: Veuillez entrer des valeurs numériques valides")
        return None

def test_with_mock_data():
    print("\n--- Test avec des patients fictifs ---")
    patients = create_mock_data()

    print("Patients disponibles:")
    for i, (key, patient) in enumerate(patients.items(), 1):
        print(f"{i}. {patient['name']} (attendu: {patient['expected']})")

    try:
        choice = int(input("\nChoisissez un patient (1-5): "))
        if 1 <= choice <= 5:
            patient_key = f"patient_{choice}"
            return patients[patient_key]['data'], patients[patient_key]['name']
        else:
            print("Choix invalide")
            return None, None
    except ValueError:
        print("Veuillez entrer un nombre valide")
        return None, None

def main():
    """Fonction principale de l'application"""

    print("----------- Test des modèles en situation réelle -----------\n")

    print("Choisissez le type de données:")
    print("1 - Utiliser des patients fictifs")
    print("2 - Saisir manuellement les données d'un patient")

    data_choice = input("Choix (1 ou 2): ")

    if data_choice == "1":
        patient_data, patient_name = test_with_mock_data()
        if patient_data is None:
            return
        print(f"\nTest avec: {patient_name}")
        print(f"Données: Oldpeak={patient_data[0][0]}, ChestPainType_ASY={patient_data[0][1]}, "
              f"ExerciseAngina_Y={patient_data[0][2]}, ST_Slope_Flat={patient_data[0][3]}")

    elif data_choice == "2":
        patient_data = get_patient_input()
        if patient_data is None:
            return
        print(f"\nDonnées saisies: Oldpeak={patient_data[0][0]}, ChestPainType_ASY={patient_data[0][1]}, "
              f"ExerciseAngina_Y={patient_data[0][2]}, ST_Slope_Flat={patient_data[0][3]}")

    else:
        print("Choix invalide")
        return

    print("\nVeuillez choisir un modèle à tester:")
    print("1 - K Nearest Neighbors")
    print("2 - Decision Tree")
    print("3 - Logistic Regression")
    print("4 - Random Forest")
    print("5 - Support Vector Machine")

    choix = input("> ")

    try:
        if choix == "1":
            knn = joblib.load('knn.pkl')
            if knn:
                print("Le modèle KNN a été chargé.")
                prediction = knn.predict(patient_data)
                try:
                    probability = knn.predict_proba(patient_data)
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
                    print(f"Probabilité: {probability[0][1]:.2%} de risque de maladie cardiaque")
                except:
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
            else:
                print("Chargement du modèle échoué.")

        elif choix == "2":
            decision_tree = joblib.load('models\decision_tree.pkl')
            if decision_tree:
                print("Le modèle Decision Tree a été chargé.")
                prediction = decision_tree.predict(patient_data)
                try:
                    probability = decision_tree.predict_proba(patient_data)
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
                    print(f"Probabilité: {probability[0][1]:.2%} de risque de maladie cardiaque")
                except:
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
            else:
                print("Chargement du modèle échoué.")

        elif choix == "3":
            logistic_regression = joblib.load('models\logistic_regression.pkl')
            if logistic_regression:
                print("Le modèle Logistic Regression a été chargé.")
                prediction = logistic_regression.predict(patient_data)
                try:
                    probability = logistic_regression.predict_proba(patient_data)
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
                    print(f"Probabilité: {probability[0][1]:.2%} de risque de maladie cardiaque")
                except:
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
            else:
                print("Chargement du modèle échoué.")

        elif choix == "4":
            random_forest = joblib.load('models\random_forest.pkl')
            if random_forest:
                print("Le modèle Random Forest a été chargé.")
                prediction = random_forest.predict(patient_data)
                try:
                    probability = random_forest.predict_proba(patient_data)
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
                    print(f"Probabilité: {probability[0][1]:.2%} de risque de maladie cardiaque")
                except:
                    print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
            else:
                print("Chargement du modèle échoué.")

        elif choix == "5":
            svm = joblib.load('models\suport_vector_machine.pkl')
            if svm:
                print("Le modèle SVM a été chargé.")
                prediction = svm.predict(patient_data)
                print(f"Prédiction: {'Cet individu possède une maladie cardiaque' if prediction[0] == 1 else 'Cet individu ne possède pas de maladie cardiaque'}")
            else:
                print("Chargement du modèle échoué.")

        else:
            print("Ce choix n'est pas disponible.")

    except FileNotFoundError:
        print(f"Erreur: Le fichier du modèle n'a pas été trouvé.")
    except Exception as e:
        print(f"Erreur lors du chargement ou de la prédiction: {str(e)}")

if __name__ == "__main__":
    main()

